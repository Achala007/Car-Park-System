while (!(in.equalsIgnoreCase("A") || in.equalsIgnoreCase("D") || in.equalsIgnoreCase("P")
				|| in.equalsIgnoreCase("S") || in.equalsIgnoreCase("M") || in.equalsIgnoreCase("H")));
		in = in.toLowerCase();
		switch (in) {
		case "a":
			obj.addVehicle();
			main(args);
			break;
		case "d":
			obj.deleteVehicle();
			main(args);
			break;
		case "p":import java.util.Scanner;

public class runner {

	public static void main(String[] args) {

		WestminsterCarParkManager obj = new WestminsterCarParkManager();
		Scanner sc = new Scanner(System.in);
		String in = "";
		do {
			System.out.println();
			System.out.println("============================================================================");
			System.out.println("|                      Westminster Car park Management System              |");
			System.out.println("=============================================================================");
			System.out.println();
			System.out.print("A   Add a Vehicle\n");
			System.out.print("D   Delete a Vehicle\n");
			System.out.print("P   Print a Parked vehicle list\n");
			System.out.print("S   Print the Percentages\n");
			System.out.print("M   Print Maximium & Newest Vehicle\n");
			System.out.print("H   Print History\n");
			System.out.print("Q   Quit\n\n");
			System.out.print("Enter the Input : ");
			
			in = sc.next();

		} while (!(in.equalsIgnoreCase("A") || in.equalsIgnoreCase("D") || in.equalsIgnoreCase("P")
				|| in.equalsIgnoreCase("S") || in.equalsIgnoreCase("M") || in.equalsIgnoreCase("H")));
		in = in.toLowerCase();
		switch (in) {
		case "a":
			obj.addVehicle();
			main(args);
			break;
		case "d":
			obj.deleteVehicle();
			main(args);
			break;
		case "p":
			obj.List();
			main(args);
			break;
		case "s":
			obj.Stat();
			main(args);
			break;
		case "m":
			obj.MaxANDMin();
			main(args);
			break;
		case "h":
			obj.History();
			main(args);
			break;
		case "Q":
			break;
		}
		sc.close();
	}

}

public class Vans extends Vehicle {

	private String cargoVolume;

	public String getCargoVolume() {
		return cargoVolume;
	}

	public void setCargoVolume(String vol) {
		this.cargoVolume = vol;
	}

	@Override
	public String getIpPlate() {
		return idPlate;
	}

	@Override
	public void setIdPlate(String idPlate) {
		this.idPlate = idPlate;
	}

	@Override
	public String getBrand() {
		return brand;
	}

	@Override
	public void setBrand(String brand) {
		this.brand = brand;
	}

	@Override
	void setType(String type) {
		this.type = type;

	}

	@Override
	String getType() {
		// TODO Auto-generated method stub
		return type;
	}

	@Override
	void setEntryDate(String date) {
		objEntry.setDate(date);

	}

	@Override
	void setEntryTime(String time) {
		objEntry.setTime(time);

	}

	@Override
	void setLeaveDate(String date) {
		objLeave.setDate(date);

	}

	@Override
	void setLeaveTime(String time) {
		objLeave.setTime(time);

	}
	@Override
	void setStatDate(String date) {
		objStat.setDate(date);

	}

	@Override
	void setStatTime(String time) {
		objStat.setTime(time);

	}
	@Override
	String getEntryDate() {
		// TODO Auto-generated method stub
		return objEntry.getDate();
	}

	@Override
	String getEntryTime() {
		// TODO Auto-generated method stub
		return objEntry.getTime();
	}

	@Override
	String getLeaveDate() {
		// TODO Auto-generated method stub
		return objLeave.getDate();
	}

	@Override
	String getLeaveTime() {
		// TODO Auto-generated method stub
		return objLeave.getTime();
	}

}

public abstract class Vehicle {
	String idPlate;
	String brand;
	String type;
	DateAndTime objEntry = new DateAndTime();
	DateAndTime objLeave = new DateAndTime();
	DateAndTime objStat = new DateAndTime();

	abstract void setEntryDate(String date);

	abstract void setEntryTime(String time);

	abstract void setStatDate(String date);

	abstract void setStatTime(String time);

	abstract void setLeaveDate(String date);

	abstract void setLeaveTime(String time);

	abstract String getEntryDate();

	abstract String getEntryTime();

	abstract String getLeaveDate();

	abstract String getLeaveTime();

	abstract void setIdPlate(String id);

	abstract void setBrand(String brand);

	abstract void setType(String type);

	abstract String getIpPlate();

	abstract String getBrand();

	abstract String getType();

	public int totalPay() {
		int totalHours = 0;
		int totalAmmount = 0;
		totalHours = ((objLeave.getYear() - objEntry.getYear()) * 365 * 24)
				+ ((objLeave.getMonth() - objEntry.getMonth()) * 30 * 24)
				+ ((objLeave.getDay() - objEntry.getDay()) * 24) + ((objLeave.getHour() - objEntry.getHour()));
		if ((objLeave.getMinute() - objEntry.getMinute()) > 0) {
			totalHours++;
		}

		System.out.println("\tTotal Hours :" + totalHours);

		totalAmmount = (totalHours / 24) * 30;
		// check weather the remainder is greater than 7 if then the cost
		// will be 30.
		if (((totalHours % 24) / 7) >= 1) {
			totalAmmount += 30;
		} else {
			// i the remainder is less than 7 it checks weather its greater
			// than 3
			if ((totalHours % 24) > 3) {
				totalAmmount += 9 + ((totalHours % 24) - 3) * 4;
			} else {
				totalAmmount += ((totalHours % 24)) * 3;
			}
		}

		return totalAmmount;
	}

	public int totalTime() {
		return ((((objStat.getYear() - objEntry.getYear()) * 365) + (objStat.getDay() - objEntry.getDay())
				+ ((objStat.getMonth() - objEntry.getMonth()) * 30) * 24) + (objStat.getHour() - objEntry.getHour()))
				* 60 + (objStat.getMinute() - objEntry.getMinute());

	}

}
